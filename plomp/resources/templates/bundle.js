!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.PlompViewer=n():t.PlompViewer=n()}(this,(()=>(()=>{"use strict";var t={d:(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)},n={};t.d(n,{default:()=>Qe});var e="#b38c00",r="#5b9bd5",i="#f17575",o="#3c78c3",a="#2c5aa0",u="#1e3c6e",s="#6bbf69",l="#4d8b4a",c="#20a0b1",f="#18717d",h="#9b7fc4",p="#7456a3",d={steppingEnabled:!1,currentStepIndex:0,matchedIndices:[],queryFocusMode:!1,selectedQueryIndex:-1,bufferData:null},y=function(){return y=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},y.apply(this,arguments)},g=function(t,n,o){return d.matchedIndices.includes(n)?"#e67e22":d.queryFocusMode?"query"===t.type&&n===d.selectedQueryIndex?d.steppingEnabled?e:c:"#d0d0d0":d.steppingEnabled?n===d.currentStepIndex?e:n<d.currentStepIndex?"prompt-request"===t.type?o.some((function(n){return"prompt-completion"===n.type&&n.id===t.id}))?r:i:"prompt-completion"===t.type?a:"event"===t.type?s:"query"===t.type?c:h:"#dbdbdb":"prompt-request"===t.type?o.some((function(n){return"prompt-completion"===n.type&&n.id===t.id}))?r:i:"prompt-completion"===t.type?a:"event"===t.type?s:"query"===t.type?c:h},m=function(t,n,e){if(void 0===e&&(e=!1),d.matchedIndices=[],!t||"query"!==t.type)return d.queryFocusMode=!1,void(d.selectedQueryIndex=-1);if(d.selectedQueryIndex=n.indexOf(t),t.data&&Array.isArray(t.data.matched_indices)){var r=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}([],t.data.matched_indices,!0);n.forEach((function(t,n){r.includes(t.originalIndex)&&d.matchedIndices.push(n)}))}d.queryFocusMode=e},v=function(){d.matchedIndices=[],d.queryFocusMode=!1,d.selectedQueryIndex=-1};function _(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}function w(){}function b(t){return null==t?w:function(){return this.querySelector(t)}}function x(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function k(){return[]}function E(t){return null==t?k:function(){return this.querySelectorAll(t)}}function A(t){return function(){return this.matches(t)}}function S(t){return function(n){return n.matches(t)}}var I=Array.prototype.find;function M(){return this.firstElementChild}var N=Array.prototype.filter;function $(){return Array.from(this.children)}function q(t){return new Array(t.length)}function O(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function T(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new O(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function C(t,n,e,r,i,o,a){var u,s,l,c=new Map,f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(p[u]=l=a.call(s,s.__data__,u,n)+"",c.has(l)?i[u]=s:c.set(l,s));for(u=0;u<h;++u)l=a.call(t,o[u],u,o)+"",(s=c.get(l))?(r[u]=s,s.__data__=o[u],c.delete(l)):e[u]=new O(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&c.get(p[u])===s&&(i[u]=s)}function D(t){return t.__data__}function P(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}O.prototype={constructor:O,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var B="http://www.w3.org/1999/xhtml";const j={svg:"http://www.w3.org/2000/svg",xhtml:B,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function X(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),j.hasOwnProperty(n)?{space:j[n],local:t}:t}function H(t){return function(){this.removeAttribute(t)}}function R(t){return function(){this.removeAttributeNS(t.space,t.local)}}function F(t,n){return function(){this.setAttribute(t,n)}}function Y(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function V(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function U(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Q(t){return function(){this.style.removeProperty(t)}}function J(t,n,e){return function(){this.style.setProperty(t,n,e)}}function G(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function W(t,n){return t.style.getPropertyValue(n)||U(t).getComputedStyle(t,null).getPropertyValue(n)}function K(t){return function(){delete this[t]}}function Z(t,n){return function(){this[t]=n}}function tt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function nt(t){return t.trim().split(/^|\s+/)}function et(t){return t.classList||new rt(t)}function rt(t){this._node=t,this._names=nt(t.getAttribute("class")||"")}function it(t,n){for(var e=et(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ot(t,n){for(var e=et(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function at(t){return function(){it(this,t)}}function ut(t){return function(){ot(this,t)}}function st(t,n){return function(){(n.apply(this,arguments)?it:ot)(this,t)}}function lt(){this.textContent=""}function ct(t){return function(){this.textContent=t}}function ft(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function ht(){this.innerHTML=""}function pt(t){return function(){this.innerHTML=t}}function dt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function yt(){this.nextSibling&&this.parentNode.appendChild(this)}function gt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===B&&n.documentElement.namespaceURI===B?n.createElement(t):n.createElementNS(e,t)}}function vt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function _t(t){var n=X(t);return(n.local?vt:mt)(n)}function wt(){return null}function bt(){var t=this.parentNode;t&&t.removeChild(this)}function xt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function kt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Et(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function At(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function St(t,n,e){var r=U(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function It(t,n){return function(){return St(this,t,n)}}function Mt(t,n){return function(){return St(this,t,n.apply(this,arguments))}}rt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Nt=[null];function $t(t,n){this._groups=t,this._parents=n}function qt(){return new $t([[document.documentElement]],Nt)}$t.prototype=qt.prototype={constructor:$t,select:function(t){"function"!=typeof t&&(t=b(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new $t(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return x(t.apply(this,arguments))}}(t):E(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=0;l<s;++l)(a=u[l])&&(r.push(t.call(a,a.__data__,l,u)),i.push(a));return new $t(r,i)},selectChild:function(t){return this.select(null==t?M:function(t){return function(){return I.call(this.children,t)}}("function"==typeof t?t:S(t)))},selectChildren:function(t){return this.selectAll(null==t?$:function(t){return function(){return N.call(this.children,t)}}("function"==typeof t?t:S(t)))},filter:function(t){"function"!=typeof t&&(t=A(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new $t(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,D);var e,r=n?C:T,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=P(t.call(f,f&&f.__data__,c,i)),y=d.length,g=s[c]=new Array(y),m=u[c]=new Array(y);r(f,h,g,m,l[c]=new Array(p),d,n);for(var v,_,w=0,b=0;w<y;++w)if(v=g[w]){for(w>=b&&(b=w+1);!(_=m[b])&&++b<y;);v._next=_||null}}return(u=new $t(u,i))._enter=s,u._exit=l,u},enter:function(){return new $t(this._enter||this._groups.map(q),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(q),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),s=0;s<a;++s)for(var l,c=e[s],f=r[s],h=c.length,p=u[s]=new Array(h),d=0;d<h;++d)(l=c[d]||f[d])&&(p[d]=l);for(;s<i;++s)u[s]=e[s];return new $t(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new $t(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=X(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?R:H:"function"==typeof n?e.local?V:z:e.local?Y:F)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Q:"function"==typeof n?G:J)(t,n,null==e?"":e)):W(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?K:"function"==typeof n?tt:Z)(t,n)):this.node()[t]},classed:function(t,n){var e=nt(t+"");if(arguments.length<2){for(var r=et(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?st:n?at:ut)(e,n))},text:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?ft:ct)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ht:("function"==typeof t?dt:pt)(t)):this.node().innerHTML},raise:function(){return this.each(yt)},lower:function(){return this.each(gt)},append:function(t){var n="function"==typeof t?t:_t(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:_t(t),r=null==n?wt:"function"==typeof n?n:b(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(bt)},clone:function(t){return this.select(t?kt:xt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?At:Et,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Mt:It)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ot=qt;var Tt={value:()=>{}};function Ct(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Dt(r)}function Dt(t){this._=t}function Pt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Tt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Dt.prototype=Ct.prototype={constructor:Dt,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=Lt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Lt(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=Pt(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Dt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const Bt=Ct;var jt,Xt,Ht=0,Rt=0,Ft=0,Yt=0,zt=0,Vt=0,Ut="object"==typeof performance&&performance.now?performance:Date,Qt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Jt(){return zt||(Qt(Gt),zt=Ut.now()+Vt)}function Gt(){zt=0}function Wt(){this._call=this._time=this._next=null}function Kt(t,n,e){var r=new Wt;return r.restart(t,n,e),r}function Zt(){zt=(Yt=Ut.now())+Vt,Ht=Rt=0;try{!function(){Jt(),++Ht;for(var t,n=jt;n;)(t=zt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--Ht}()}finally{Ht=0,function(){for(var t,n,e=jt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:jt=n);Xt=t,nn(r)}(),zt=0}}function tn(){var t=Ut.now(),n=t-Yt;n>1e3&&(Vt-=n,Yt=t)}function nn(t){Ht||(Rt&&(Rt=clearTimeout(Rt)),t-zt>24?(t<1/0&&(Rt=setTimeout(Zt,t-Ut.now()-Vt)),Ft&&(Ft=clearInterval(Ft))):(Ft||(Yt=Ut.now(),Ft=setInterval(tn,1e3)),Ht=1,Qt(Zt)))}function en(t,n,e){var r=new Wt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Wt.prototype=Kt.prototype={constructor:Wt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Jt():+e)+(null==n?0:+n),this._next||Xt===this||(Xt?Xt._next=this:jt=this,Xt=this),this._call=t,this._time=e,nn()},stop:function(){this._call&&(this._call=null,this._time=1/0,nn())}};var rn=Bt("start","end","cancel","interrupt"),on=[];function an(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,f,h;if(1!==e.state)return u();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return en(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(en((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Kt((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:rn,tween:on,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function un(t,n){var e=ln(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function sn(t,n){var e=ln(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ln(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function cn(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var fn,hn=180/Math.PI,pn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function dn(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*hn,skewX:Math.atan(s)*hn,scaleX:a,scaleY:u}}function yn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:cn(t,i)},{i:s-2,x:cn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:cn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:cn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:cn(t,e)},{i:u-2,x:cn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var gn=yn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?pn:dn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),mn=yn((function(t){return null==t?pn:(fn||(fn=document.createElementNS("http://www.w3.org/2000/svg","g")),fn.setAttribute("transform",t),(t=fn.transform.baseVal.consolidate())?dn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):pn)}),", ",")",")");function vn(t,n){var e,r;return function(){var i=sn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function _n(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=sn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}}function wn(t,n,e){var r=t._id;return t.each((function(){var t=sn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ln(t,r).value[n]}}function bn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function xn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function kn(){}var En=.7,An=1/En,Sn="\\s*([+-]?\\d+)\\s*",In="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Mn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Nn=/^#([0-9a-f]{3,8})$/,$n=new RegExp(`^rgb\\(${Sn},${Sn},${Sn}\\)$`),qn=new RegExp(`^rgb\\(${Mn},${Mn},${Mn}\\)$`),On=new RegExp(`^rgba\\(${Sn},${Sn},${Sn},${In}\\)$`),Tn=new RegExp(`^rgba\\(${Mn},${Mn},${Mn},${In}\\)$`),Cn=new RegExp(`^hsl\\(${In},${Mn},${Mn}\\)$`),Dn=new RegExp(`^hsla\\(${In},${Mn},${Mn},${In}\\)$`),Pn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ln(){return this.rgb().formatHex()}function Bn(){return this.rgb().formatRgb()}function jn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Nn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Xn(n):3===e?new Fn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Hn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Hn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=$n.exec(t))?new Fn(n[1],n[2],n[3],1):(n=qn.exec(t))?new Fn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=On.exec(t))?Hn(n[1],n[2],n[3],n[4]):(n=Tn.exec(t))?Hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Cn.exec(t))?Jn(n[1],n[2]/100,n[3]/100,1):(n=Dn.exec(t))?Jn(n[1],n[2]/100,n[3]/100,n[4]):Pn.hasOwnProperty(t)?Xn(Pn[t]):"transparent"===t?new Fn(NaN,NaN,NaN,0):null}function Xn(t){return new Fn(t>>16&255,t>>8&255,255&t,1)}function Hn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Fn(t,n,e,r)}function Rn(t,n,e,r){return 1===arguments.length?((i=t)instanceof kn||(i=jn(i)),i?new Fn((i=i.rgb()).r,i.g,i.b,i.opacity):new Fn):new Fn(t,n,e,null==r?1:r);var i}function Fn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Yn(){return`#${Qn(this.r)}${Qn(this.g)}${Qn(this.b)}`}function zn(){const t=Vn(this.opacity);return`${1===t?"rgb(":"rgba("}${Un(this.r)}, ${Un(this.g)}, ${Un(this.b)}${1===t?")":`, ${t})`}`}function Vn(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function Un(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Qn(t){return((t=Un(t))<16?"0":"")+t.toString(16)}function Jn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Wn(t,n,e,r)}function Gn(t){if(t instanceof Wn)return new Wn(t.h,t.s,t.l,t.opacity);if(t instanceof kn||(t=jn(t)),!t)return new Wn;if(t instanceof Wn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new Wn(a,u,s,t.opacity)}function Wn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Kn(t){return(t=(t||0)%360)<0?t+360:t}function Zn(t){return Math.max(0,Math.min(1,t||0))}function te(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ne(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}bn(kn,jn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Ln,formatHex:Ln,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Gn(this).formatHsl()},formatRgb:Bn,toString:Bn}),bn(Fn,Rn,xn(kn,{brighter(t){return t=null==t?An:Math.pow(An,t),new Fn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?En:Math.pow(En,t),new Fn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Fn(Un(this.r),Un(this.g),Un(this.b),Vn(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Yn,formatHex:Yn,formatHex8:function(){return`#${Qn(this.r)}${Qn(this.g)}${Qn(this.b)}${Qn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:zn,toString:zn})),bn(Wn,(function(t,n,e,r){return 1===arguments.length?Gn(t):new Wn(t,n,e,null==r?1:r)}),xn(kn,{brighter(t){return t=null==t?An:Math.pow(An,t),new Wn(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?En:Math.pow(En,t),new Wn(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Fn(te(t>=240?t-240:t+120,i,r),te(t,i,r),te(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Wn(Kn(this.h),Zn(this.s),Zn(this.l),Vn(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=Vn(this.opacity);return`${1===t?"hsl(":"hsla("}${Kn(this.h)}, ${100*Zn(this.s)}%, ${100*Zn(this.l)}%${1===t?")":`, ${t})`}`}}));const ee=t=>()=>t;function re(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ee(isNaN(t)?n:t)}const ie=function t(n){var e=function(t){return 1==(t=+t)?re:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ee(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Rn(t)).r,(n=Rn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=re(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function oe(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Rn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}oe((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return ne((e-r/n)*n,a,i,o,u)}})),oe((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return ne((e-r/n)*n,i,o,a,u)}}));var ae=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ue=new RegExp(ae.source,"g");function se(t,n){var e,r,i,o=ae.lastIndex=ue.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=ae.exec(t))&&(r=ue.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:cn(e,r)})),o=ue.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function le(t,n){var e;return("number"==typeof n?cn:n instanceof jn?ie:(e=jn(n))?(n=e,ie):se)(t,n)}function ce(t){return function(){this.removeAttribute(t)}}function fe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function he(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function pe(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function de(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function ye(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function ge(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}(t,i)),e}return i._value=n,i}function me(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ve(t,n){return function(){un(this,t).delay=+n.apply(this,arguments)}}function _e(t,n){return n=+n,function(){un(this,t).delay=n}}function we(t,n){return function(){sn(this,t).duration=+n.apply(this,arguments)}}function be(t,n){return n=+n,function(){sn(this,t).duration=n}}var xe=Ot.prototype.constructor;function ke(t){return function(){this.style.removeProperty(t)}}var Ee=0;function Ae(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Se(){return++Ee}var Ie=Ot.prototype;Ae.prototype=function(t){return Ot().transition(t)}.prototype={constructor:Ae,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=b(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,l=r[a],c=l.length,f=o[a]=new Array(c),h=0;h<c;++h)(u=l[h])&&(s=t.call(u,u.__data__,h,l))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,an(f[h],n,e,h,f,ln(u,e)));return new Ae(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=E(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,l=r[u],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),d=ln(s,e),y=0,g=p.length;y<g;++y)(h=p[y])&&an(h,n,e,y,p,d);o.push(p),a.push(s)}return new Ae(o,a,n,e)},selectChild:Ie.selectChild,selectChildren:Ie.selectChildren,filter:function(t){"function"!=typeof t&&(t=A(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new Ae(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new Ae(a,this._parents,this._name,this._id)},selection:function(){return new xe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Se(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=ln(a,n);an(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ae(r,this._parents,t,e)},call:Ie.call,nodes:Ie.nodes,node:Ie.node,size:Ie.size,empty:Ie.empty,each:Ie.each,on:function(t,n){var e=this._id;return arguments.length<2?ln(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?un:sn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=X(t),r="transform"===e?mn:le;return this.attrTween(t,"function"==typeof n?(e.local?ye:de)(e,r,wn(this,"attr."+t,n)):null==n?(e.local?fe:ce)(e):(e.local?pe:he)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=X(t);return this.tween(e,(r.local?ge:me)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?gn:le;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=W(this,t),a=(this.style.removeProperty(t),W(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,ke(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=W(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=W(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,wn(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=sn(this,t),l=s.on,c=null==s.value[a]?o||(o=ke(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=W(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(wn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,function(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&function(t){return function(n){this.textContent=t.call(this,n)}}(r)),n}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ln(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?vn:_n)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ve:_e)(n,t)):ln(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?we:be)(n,t)):ln(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){sn(this,t).ease=n}}(n,t)):ln(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;sn(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=sn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:Ie[Symbol.iterator]};var Me={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ne(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ot.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},Ot.prototype.transition=function(t){var n,e;t instanceof Ae?(n=t._id,t=t._name):(n=Se(),(e=Me).time=Jt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&an(a,t,n,l,u,e||Ne(a,n));return new Ae(r,this._parents,t,n)};const{abs:$e,max:qe,min:Oe}=Math;function Te(t){return{type:t}}function Ce(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}["w","e"].map(Te),["n","s"].map(Te),["n","w","e","s","nw","ne","sw","se"].map(Te);class De extends Map{constructor(t,n=Le){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=t)for(const[n,e]of t)this.set(n,e)}get(t){return super.get(Pe(this,t))}has(t){return super.has(Pe(this,t))}set(t,n){return super.set(function({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):(t.set(r,e),e)}(this,t),n)}delete(t){return super.delete(function({_intern:t,_key:n},e){const r=n(e);return t.has(r)&&(e=t.get(r),t.delete(r)),e}(this,t))}}function Pe({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):e}function Le(t){return null!==t&&"object"==typeof t?t.valueOf():t}Set;const Be=Symbol("implicit");function je(){var t=new De,n=[],e=[],r=Be;function i(i){let o=t.get(i);if(void 0===o){if(r!==Be)return r;t.set(i,o=n.push(i)-1)}return e[o%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new De;for(const r of e)t.has(r)||t.set(r,n.push(r)-1);return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return je(n,e).unknown(r)},Ce.apply(i,arguments),i}function Xe(){var t,n,e=je().unknown(void 0),r=e.domain,i=e.range,o=0,a=1,u=!1,s=0,l=0,c=.5;function f(){var e=r().length,f=a<o,h=f?a:o,p=f?o:a;t=(p-h)/Math.max(1,e-s+2*l),u&&(t=Math.floor(t)),h+=(p-h-t*(e-s))*c,n=t*(1-s),u&&(h=Math.round(h),n=Math.round(n));var d=_(e).map((function(n){return h+t*n}));return i(f?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),f()):r()},e.range=function(t){return arguments.length?([o,a]=t,o=+o,a=+a,f()):[o,a]},e.rangeRound=function(t){return[o,a]=t,o=+o,a=+a,u=!0,f()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,f()):u},e.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),f()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),f()):s},e.paddingOuter=function(t){return arguments.length?(l=+t,f()):l},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},e.copy=function(){return Xe(r(),[o,a]).round(u).paddingInner(s).paddingOuter(l).align(c)},Ce.apply(f(),arguments)}function He(t){return"string"==typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Nt)}function Re(t){return"string"==typeof t?new $t([document.querySelectorAll(t)],[document.documentElement]):new $t([x(t)],Nt)}function Fe(t,n,e){this.k=t,this.x=n,this.y=e}Fe.prototype={constructor:Fe,scale:function(t){return 1===t?this:new Fe(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Fe(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Fe(1,0,0),Fe.prototype;var Ye={setupStatsSection:function(t,n,e){var r=document.getElementById("stats-section");r&&(r.innerHTML='\n                <p style="margin: 0; font-size: 12px;"><strong>Buffer:</strong> '.concat(n.key," (").concat(e.length,' items)</p>\n                <button id="step-backward" style="font-size: 12px;">&#9664;</button>\n                <button id="step-forward" style="font-size: 12px;">&#9654;</button>\n                <button id="toggle-stepping" style="font-size: 12px;">Enable Stepping</button>\n            '))},createTooltip:function(t){return He(t).append("div").attr("class","timeline-tooltip")},updateDetailsSidebar:function(t,n){var e=document.getElementById("details-sidebar");e&&(e.style.display="block",e.innerHTML="\n                <h3>".concat(t.type.toUpperCase()," (#").concat(n,")</h3>\n                <pre>").concat(JSON.stringify(t,null,2),"</pre>\n            "))},setupTagFilters:function(t){var n=function(t){var n=new Set;return t.forEach((function(t){t.tags&&Object.entries(t.tags).forEach((function(t){var e=t[0],r=t[1];n.add("".concat(e,"=").concat(r))}))})),n}(t),e=document.getElementById("tag-filters");e&&(e.innerHTML="",n.forEach((function(n){var r=document.createElement("div");r.className="tag-filter",r.textContent=n,r.addEventListener("click",(function(){r.classList.toggle("active"),Ye.applyTagFilter(t)})),e.appendChild(r)})))},applyTagFilter:function(t){var n=Array.from(document.querySelectorAll(".tag-filter.active")).map((function(t){return t.textContent})),e=t.filter((function(t){return!n.length||!!t.tags&&n.every((function(n){var e,r=n.split("="),i=r[0],o=r[1];return(null===(e=t.tags)||void 0===e?void 0:e[i])===o}))}));Re(".timeline-item").style("display",(function(t){return e.includes(t)?"":"none"}))}},ze={createSVG:function(t,n,e){return He(t).append("svg").attr("width",n-400).attr("height",e)},renderTimestamps:function(t,n,e,r){var i=t.append("g").attr("class","timestamp-group");return i.selectAll(".timestamp").data(e).enter().append("text").attr("class","timestamp").attr("x",r-6).attr("y",(function(t,e){var r=n(e.toString());return(null!=r?r:0)+n.bandwidth()-4})).attr("text-anchor","end").style("font-size","10px").style("fill","#555").text((function(t){return new Date(t.timestamp).toLocaleTimeString()})),i},renderItemBlocks:function(t,n,e,r,i,o){var a=t.append("g").attr("class","item-block-group"),u=a.selectAll(".timeline-item").data(e).enter().append("g").attr("class","timeline-item").attr("transform",(function(t,e){var r,o=null!==(r=n(e.toString()))&&void 0!==r?r:0;return"prompt-completion"===t.type?"translate(".concat(i+20,", ").concat(o,")"):"translate(".concat(i,", ").concat(o,")")}));return u.append("rect").attr("height",n.bandwidth()).attr("width",r-500).attr("fill",(function(t,n){return g(t,n,e)})),u.append("text").attr("x",4).attr("y",n.bandwidth()-4).style("font-size","10px").attr("fill","#fff").text((function(t,n){var e,r,i,o="#".concat(n,": ").concat(t.type),a="";return(null===(e=t.data)||void 0===e?void 0:e.prompt)?a=t.data.prompt.substring(0,100):(null===(i=null===(r=t.data)||void 0===r?void 0:r.completion)||void 0===i?void 0:i.text)?a=t.data.completion.text.substring(0,100):t.data&&(a=JSON.stringify(t.data).substring(0,100)),a?o+" - "+a+"...":o})),ze.attachBlockEvents(u,e,o),a},attachBlockEvents:function(t,n,e){t.on("mouseover",(function(t,r){if(!d.steppingEnabled||n.indexOf(r)<=d.currentStepIndex){if(d.queryFocusMode&&!d.matchedIndices.includes(n.indexOf(r))&&!("query"===r.type&&d.matchedIndices.length>0))return;"prompt-request"===r.type?He(this).select("rect").attr("fill",o):"prompt-completion"===r.type?He(this).select("rect").attr("fill",u):"event"===r.type?He(this).select("rect").attr("fill",l):"query"===r.type?He(this).select("rect").attr("fill",f):He(this).select("rect").attr("fill",p)}var i=new Date(r.timestamp).toLocaleTimeString(),a="<strong>".concat(r.type.toUpperCase(),"</strong><br>Timestamp: ").concat(i);r.tags&&(a+="<br>Tags: ".concat(JSON.stringify(r.tags))),e.style("display","block").html(a).style("left",t.pageX+10+"px").style("top",t.pageY-28+"px")})).on("mouseout",(function(t,r){var i=n.indexOf(r);He(this).select("rect").attr("fill",g(r,i,n)),e.style("display","none")})).on("click",(function(t,e){var r=n.indexOf(e);Ye.updateDetailsSidebar(e,r),"query"===e.type?d.selectedQueryIndex===r?v():m(e,n,!0):v(),ze.updateItemsDisplay(n)})).on("dblclick",(function(t,e){var r=document.getElementById("details-sidebar");r&&(r.style.display="none"),v(),ze.updateItemsDisplay(n)}))},updateItemsDisplay:function(t){Re(".timeline-item").select("rect").attr("fill",(function(n,e){return g(n,e,t)})),d.steppingEnabled&&d.currentStepIndex>=0&&d.currentStepIndex<t.length&&Ye.updateDetailsSidebar(t[d.currentStepIndex],d.currentStepIndex)}},Ve=function(t){var n=document.getElementById("loading-indicator");n&&(n.style.display="block"),t.innerHTML="";var e=document.createElement("div");t.appendChild(e),d.bufferData=__PLOMP_BUFFER_JSON__;var r=function(t){if(!t||!Array.isArray(t.buffer_items))return[];var n=[];return t.buffer_items.forEach((function(t,e){var r,i;"prompt"===t.type?(n.push(y(y({},t),{type:"prompt-request",originalIndex:e})),(null===(i=null===(r=t.data)||void 0===r?void 0:r.completion)||void 0===i?void 0:i.completion_timestamp)&&n.push(y(y({},t),{type:"prompt-completion",timestamp:t.data.completion.completion_timestamp,originalIndex:e}))):n.push(y(y({},t),{originalIndex:e}))})),n.sort((function(t,n){return new Date(t.timestamp).getTime()-new Date(n.timestamp).getTime()}))}(d.bufferData);if(!r.length)return e.innerHTML="<p>No buffer items to display.</p>",void(n&&(n.style.display="none"));Ye.setupStatsSection(t,d.bufferData,r);var i=Ye.createTooltip(t),o=t.clientWidth,a=20*r.length+10,u=ze.createSVG(e,o,a),s=Xe().domain(_(r.length).map((function(t){return t.toString()}))).range([0,a]).padding(.1);ze.renderTimestamps(u,s,r,70),ze.renderItemBlocks(u,s,r,o,70,i),Ye.setupTagFilters(r),function(t){var n=document.getElementById("step-backward");n&&n.addEventListener("click",(function(){if(d.steppingEnabled&&d.currentStepIndex>0){d.currentStepIndex--;var n=t[d.currentStepIndex];"query"===n.type?m(n,t,!0):v(),ze.updateItemsDisplay(t)}}));var e=document.getElementById("step-forward");e&&e.addEventListener("click",(function(){if(d.steppingEnabled&&d.currentStepIndex<t.length-1){d.currentStepIndex++;var n=t[d.currentStepIndex];"query"===n.type?m(n,t,!0):v(),ze.updateItemsDisplay(t)}}));var r=document.getElementById("toggle-stepping");r&&r.addEventListener("click",(function(){d.steppingEnabled=!d.steppingEnabled,r.textContent=d.steppingEnabled?"Disable Stepping":"Enable Stepping",d.currentStepIndex=d.steppingEnabled?0:-1,v(),d.steppingEnabled&&t.length>0&&"query"===t[0].type&&m(t[0],t,!0),ze.updateItemsDisplay(t)}))}(r),n&&(n.style.display="none")},Ue={init:function(){var t=document.getElementById("timeline-view");t&&Ve(t)}};document.addEventListener("DOMContentLoaded",Ue.init),window.PlompViewer=Ue;const Qe=Ue;return n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,